////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
// SASS Utilities v2.0       ///////////////////////////////////////////////////
// By: Kyle Brumm            ///////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

// --------------------------------------------------
// BREAKPOINTS
// --------------------------------------------------
$breakpoints: (	// Breakpoint settings
	'xxlarge':		 (min-width: 120.0625em),												// >= 1921px
	'xlarge':			 (max-width: 120em),														// <= 1920px
	'xlarge-only': (min-width: 90.0625em) and (max-width: 120em),	// 1441px - 1920px
	'large':			 (max-width: 90em),															// <= 1440px
	'large-only':	 (min-width: 64.0625em) and (max-width: 90em),	// 1025px - 1440px
	'medium':			 (max-width: 64em),															// <= 1024px
	'medium-only': (min-width: 40.0625em) and (max-width: 64em),	// 641px - 1024px
	'not-small':	 (min-width: 40.0625em),												// >= 641px
	'small':			 (max-width: 40em),															// <= 640px
	'xsmall':			 (max-width: 30em),															// <= 480px
	'xxsmall':		 (max-width: 20em),															// <= 320px
);

@mixin bp($break, $viewport1: null) {
	// Check if we are just passing a default value
	@if not $viewport1 {
		@if map-has-key($breakpoints, $break) {
			@media only screen and #{inspect(map-get($breakpoints, $break))} { @content; }
		}
		@else {
			@warn "Couldn't find a breakpoint named `#{$break}`.";
		}
	}
	@else {
		// Min breakpoint
		@if $break == min {
			@media screen and (min-width: $viewport1) { @content; }
		}
		// Max breakpoint
		@else if $break == max {
			@media screen and (max-width: $viewport1) { @content; }
		}
		// Custom breakpoint
		@else {
			@media screen and (min-width: $break) and (max-width: $viewport1) { @content; }
		}
	}
}

// --------------------------------------------------
// BORDER RADIUS
// --------------------------------------------------

// Single side border radius
// -------------------------
@mixin border-top-radius($radius) {
	border-top-right-radius: $radius;
	border-top-left-radius: $radius;
}
@mixin border-right-radius($radius) {
	border-top-right-radius: $radius;
	border-bottom-right-radius: $radius;
}
@mixin border-bottom-radius($radius) {
	border-bottom-right-radius: $radius;
	border-bottom-left-radius: $radius;
}
@mixin border-left-radius($radius) {
	border-top-left-radius: $radius;
	border-bottom-left-radius: $radius;
}

// --------------------------------------------------
// TRANSFORMATIONS
// --------------------------------------------------
@mixin transform-single($property, $value) {
	transform: #{$property}unquote("("#{$value}")");
}
@mixin rotate($deg) {
	@include transform-single(rotate, $deg);
}
@mixin rotateX($deg) {
	@include transform-single(rotateX, $deg);
}
@mixin rotateY($deg) {
	@include transform-single(rotateY, $deg);
}
@mixin rotateZ($deg) {
	@include transform-single(rotateZ, $deg);
}
@mixin rotate3d($rotate3d...) {
	@include transform-single(rotate3d, $rotate3d);
}
@mixin scale($ratio) {
	@include transform-single(scale, $ratio);
}
@mixin scaleX($ratio) {
	@include transform-single(scaleX, $ratio);
}
@mixin scaleY($ratio) {
	@include transform-single(scaleY, $ratio);
}
@mixin scaleZ($ratio) {
	@include transform-single(scaleZ, $ratio);
}
@mixin scale3d($x, $y, $z) {
	$multi-var: $x, $y, $z;
	@include transform-single(scale3d, $multi-var);
}
@mixin skew($x, $y) {
	$multi-var: $x, $y;
	@include transform-single(skew, $multi-var);
	backface-visibility: hidden;
}
@mixin skewX($deg) {
	@include transform-single(skewX, $deg);
	backface-visibility: hidden;
}
@mixin skewY($deg) {
	@include transform-single(skewY, $deg);
	backface-visibility: hidden;
}
@mixin translate($x, $y) {
	$multi-var: $x, $y;
	@include transform-single(translate, $multi-var);
}
@mixin translateX($x) {
	@include transform-single(translateX, $x);
}
@mixin translateY($y) {
	@include transform-single(translateY, $y);
}
@mixin translateZ($z) {
	@include transform-single(translateZ, $z);
}
@mixin translate3d($x, $y, $z) {
	$multi-var: $x, $y, $z;
	@include transform-single(translate3d, $multi-var);
}

// --------------------------------------------------
// GRADIENTS
// --------------------------------------------------
@mixin gradient-horizontal($startColor: #555, $endColor: #333) {
	background-color: $endColor;
	background-image: -moz-linear-gradient(left, $startColor, $endColor); // FF 3.6+
	background-image: -webkit-gradient(linear, 0 0, 100% 0, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image: -webkit-linear-gradient(left, $startColor, $endColor); // Safari 5.1+, Chrome 10+
	background-image: -o-linear-gradient(left, $startColor, $endColor); // Opera 11.10
	background-image: linear-gradient(to right, $startColor, $endColor); // Standard, IE10
	background-repeat: repeat-x;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=1); // IE9 and down
}
@mixin gradient-vertical($startColor: #555, $endColor: #333) {
	background-color: mix($startColor, $endColor, 60%);
	background-image: -moz-linear-gradient(top, $startColor, $endColor); // FF 3.6+
	background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), to($endColor)); // Safari 4+, Chrome 2+
	background-image: -webkit-linear-gradient(top, $startColor, $endColor); // Safari 5.1+, Chrome 10+
	background-image: -o-linear-gradient(top, $startColor, $endColor); // Opera 11.10
	background-image: linear-gradient(to bottom, $startColor, $endColor); // Standard, IE10
	background-repeat: repeat-x;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=0); // IE9 and down
}
@mixin gradient-directional($startColor: #555, $endColor: #333, $deg: 45deg) {
	background-color: $endColor;
	background-repeat: repeat-x;
	background-image: -moz-linear-gradient($deg, $startColor, $endColor); // FF 3.6+
	background-image: -webkit-linear-gradient($deg, $startColor, $endColor); // Safari 5.1+, Chrome 10+
	background-image: -o-linear-gradient($deg, $startColor, $endColor); // Opera 11.10
	background-image: linear-gradient($deg, $startColor, $endColor); // Standard, IE10
}
// Only works for webkit?
@mixin gradient-vertical-three-colors($startColor: #00b3ee, $midColor: #7a43b6, $colorStop: 50%, $endColor: #c3325f) {
	background-color: mix($midColor, $endColor, 80%);
	background-image: -webkit-gradient(linear, 0 0, 0 100%, from($startColor), color-stop($colorStop, $midColor), to($endColor));
	background-image: -webkit-linear-gradient($startColor, $midColor $colorStop, $endColor);
	background-image: -moz-linear-gradient(top, $startColor, $midColor $colorStop, $endColor);
	background-image: -o-linear-gradient($startColor, $midColor $colorStop, $endColor);
	background-image: linear-gradient($startColor, $midColor $colorStop, $endColor);
	background-repeat: no-repeat;
	filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{ie-hex-str($startColor)}', endColorstr='#{ie-hex-str($endColor)}', GradientType=0); // IE9 and down, gets no color-stop at all for proper fallback
}
@mixin gradient-radial($innerColor: #555, $outerColor: #333)  {
	background-color: $outerColor;
	background-image: -webkit-gradient(radial, center center, 0, center center, 460, from($innerColor), to($outerColor));
	background-image: -webkit-radial-gradient(circle, $innerColor, $outerColor);
	background-image: -moz-radial-gradient(circle, $innerColor, $outerColor);
	background-image: -o-radial-gradient(circle, $innerColor, $outerColor);
	background-repeat: no-repeat;
}
@mixin gradient-striped($color: #555, $angle: 45deg) {
	background-color: $color;
	background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, rgba(255,255,255,.15)), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, rgba(255,255,255,.15)), color-stop(.75, rgba(255,255,255,.15)), color-stop(.75, transparent), to(transparent));
	background-image: -webkit-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
	background-image: -moz-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
	background-image: -o-linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
	background-image: linear-gradient($angle, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent);
}

// --------------------------------------------------
// UTILITIES / EXTRAS
// --------------------------------------------------

// Clearfix
// --------
// For clearing floats like a boss h5bp.com/q
%clearfix {
 *zoom: 1;
 &:before,
 &:after {
	 display: table;
	 content: "";
	 line-height: 0;
 }
 &:after {
	 clear: both;
 }
}

// Hide text
// ---------
%hide-text {
 font: 0/0 a;
 color: transparent;
 text-shadow: none;
}

// Center an element
// -----------------
%centerer {
	position: absolute;
	top: 50%;
	left: 50%;
	@include translate(-50%, -50%);
}

// Center an element vertically
// ----------------------------
%vert-centerer {
	position: absolute;
	top: 50%;
	@include translateY(-50%);
}

// Cover everything
// ----------------
%coverer {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

// Center-align a block level element
// ----------------------------------
%center-block {
	display: block;
	margin-left: auto;
	margin-right: auto;
}

// Placeholder text
// ----------------
@mixin placeholder-color($color: #555555) {
 &:-moz-placeholder {
	 color: $color;
 }
 &:-ms-input-placeholder {
	 color: $color;
 }
 &::-webkit-input-placeholder {
	 color: $color;
 }
}

// Sizing
// ------
@mixin size($width, $height: $width) {
 width: $width;
 height: $height;
}
@mixin square($size) {
 @include size($size, $size);
}


// Add hover state
// ---------------
@mixin hoverer($attr, $normal, $hovered) {
	#{$attr}: #{$normal};
	&:hover {
		#{$attr}: #{$hovered};
	}
}

// Add responsive styling for multiple widths
// ------------------------------------------
@mixin responsive($attr, $full, $medium:false, $small:false) {
	#{$attr}: #{$full};
	@include bp(medium) {
		#{$attr}: #{$medium};
	}
	@include bp(small) {
		#{$attr}: #{$small};
	}
}

// Position Mixin
// Original: http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/
// Modified: http://codepen.io/piouPiouM/pen/bLmkz
// ------------------------------------------------------
$top-default:    null !default;
$right-default:  null !default;
$bottom-default: null !default;
$left-default:   null !default;

@mixin position($type, $top: $top-default, $right: $right-default, $bottom: $bottom-default, $left: $left-default) {
	position: $type;

	$allowed_types: 'absolute' 'relative' 'fixed';
	@if not index($allowed_types, $type) {
		@warn "Unknown position: #{$type}.";
	}
	@each $data in top $top, right $right, bottom $bottom, left $left {
		#{nth($data, 1)}: nth($data, 2);
	}
}
@mixin absolute($top: $top-default, $right: $right-default, $bottom: $bottom-default, $left: $left-default) {
	@include position(absolute, $top, $right, $bottom, $left);
}
@mixin relative($top: $top-default, $right: $right-default, $bottom: $bottom-default, $left: $left-default) {
	@include position(relative, $top, $right, $bottom, $left);
}
@mixin fixed($top: $top-default, $right: $right-default, $bottom: $bottom-default, $left: $left-default) {
	@include position(fixed, $top, $right, $bottom, $left);
}

// --------------------------------------------------
// FUNCTIONS
// --------------------------------------------------

// Mix white with another color
// ----------------------------
@function tint($color, $percent){
	@return mix(white, $color, $percent);
}
 
// Mix black with another color
// ----------------------------
@function shade($color, $percent){
	@return mix(black, $color, $percent);
}

// Strip the units from a value
// ----------------------------
@function strip-units($value) {
	@return $value / ($value * 0 + 1);
}

// Calculate rems from a px value
// ------------------------------
$base-px: 16 !default;
@function rem-calc($px) {
	@if not unitless($px) {
		$px: strip-units($px);
	}
	@if not unitless($base-px) {
		$base-px: strip-units($base-px);
	}
	@return ($px / $base-px) * 1rem;
}

// Calculate ems from a px value
// ------------------------------
@function em-calc($px, $base-val: $base-px) {
	@if not unitless($px) {
		$px: strip-units($px);
	}
	@if not unitless($base-val) {
		$base-val: strip-units($base-val);
	}
	@return ($px / $base-val) * 1em;
}

// Create a random color
// ---------------------
@function random-color() {
	$red: random(256)-1;
	$green: random(256)-1;
	$blue: random(256)-1;
	@return rgb($red, $green, $blue);
}
